<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="scriptImports" type="xstring" value="// Your custom imports:%%00010"/>
        <entry key="scriptFields" type="xstring" value="// Your custom variables:%%00010"/>
        <entry key="scriptBody" type="xstring" value="// Enter your code here:%%00010%%00010%%00009%%00009%%00010// Inicializar la acción%%00010String action = &quot;NO HACER NADA&quot;; %%00010%%00010// Obtener el número total de columnas%%00010int totalColumns = getColumnCount(); // Total de columnas en la tabla%%00010int numColumnasPrimeraTabla = (totalColumns - 5) / 2; // Número de columnas de la primera tabla%%00010%%00010// Crear un vector para almacenar los nombres de las columnas%%00010String[] nombresColumnas = new String[numColumnasPrimeraTabla + 5]; // +5 para las dos últimas columnas%%00010%%00010// Obtener los nombres de las columnas de la primera tabla y de las dos últimas columnas%%00010for (int i = 0; i &lt; numColumnasPrimeraTabla; i++) {%%00010    nombresColumnas[i] = getColumnName(i); // Obtener el nombre de la columna%%00010}%%00010%%00010// Obtener los nombres de las cinco últimas columnas%%00010nombresColumnas[numColumnasPrimeraTabla] = getColumnName(totalColumns - 5); // 5 columna por el final%%00010nombresColumnas[numColumnasPrimeraTabla + 1] = getColumnName(totalColumns - 4); // 4 columna por el final%%00010nombresColumnas[numColumnasPrimeraTabla + 2] = getColumnName(totalColumns - 3); //  3 columna por el final%%00010nombresColumnas[numColumnasPrimeraTabla + 3] = getColumnName(totalColumns - 2); // Penúltima columna%%00010nombresColumnas[numColumnasPrimeraTabla + 4] = getColumnName(totalColumns - 1); // Última columna%%00010%%00010%%00010// Crear una nueva variable que contenga el primer elemento del vector%%00010String primeraVariable = nombresColumnas[0]; // La primera posición del vector%%00010%%00010// Crear un vector con el resto de las variables (desde la segunda hasta la última)%%00010String[] restoVariables = new String[nombresColumnas.length - 1]; // Tamaño del nuevo vector%%00010System.arraycopy(nombresColumnas, 1, restoVariables, 0, restoVariables.length); // Copiar el resto de las variables%%00010%%00010%%00010// Arreglo para almacenar los valores de la fila actual%%00010String[] valoresFila = new String[totalColumns];%%00010%%00010// Obtener todos los valores de la fila actual y almacenarlos en el arreglo%%00010for (int i = 0; i &lt; totalColumns; i++) {%%00010    valoresFila[i] = getCell(i, tString);%%00010}%%00010%%00010// Inicializar la variable booleana en true%%00010boolean allEqual = true; %%00010int sum = 0; // Variable para contar diferencias%%00010%%00010// Iterar sobre las columnas de la primera tabla%%00010for (int i = 0; i &lt; numColumnasPrimeraTabla; i++) {%%00010    // Obtener el valor de la primera tabla (posición i) y el valor de la segunda tabla (posición i + numColumnasPrimeraTabla)%%00010    String valorPrimeraTabla = valoresFila[i];%%00010    String valorSegundaTabla = valoresFila[i + numColumnasPrimeraTabla];%%00010%%00010    // Debug: Imprimir los valores para ver si son nulos%%00010    logWarn(&quot;Comparando: &quot; + valorPrimeraTabla + &quot; con &quot; + valorSegundaTabla);%%00010%%00010    // Comprobar si ambos valores son nulos%%00010    if (valorPrimeraTabla == null &amp;&amp; valorSegundaTabla == null) {%%00010        logWarn(&quot;Ambos valores son nulos, se consideran iguales&quot;);%%00010        continue; // Pasar a la siguiente iteración%%00010    }%%00010%%00010    // Comprobar si uno de los valores es nulo%%00010    if (valorPrimeraTabla == null || valorSegundaTabla == null) {%%00010        logWarn(&quot;Uno de los valores es nulo y el otro no, son diferentes.&quot;);%%00010        allEqual = false; // Marcar como no iguales%%00010        break; // Salir del bucle%%00010    }%%00010%%00010    // Comparar los valores utilizando equals(), ignorando los espacios en blanco con trim()%%00010    if (!valorPrimeraTabla.trim().equals(valorSegundaTabla.trim())) {%%00010        allEqual = false; // Si son diferentes, cambiar a false%%00010        logWarn(&quot;Los valores son diferentes.&quot;);%%00010        break; // Salir del bucle%%00010    }%%00010}%%00010%%00010%%00010// Determinar la acción en función de la comparación%%00010if (allEqual) {%%00010    action = &quot;NO HACER NADA&quot;; // Si todos los valores son iguales%%00010} else if (valoresFila[0] != null &amp;&amp; valoresFila[numColumnasPrimeraTabla + 1] == null) {%%00010    action = &quot;INSERTAR&quot;; // Si la primera columna de la primera tabla no es nula y la de la segunda tabla es nula%%00010}  else {%%00010    action = &quot;UPDATE&quot;; // Si hay alguna diferencia%%00010}%%00010%%00010// Asignar el valor de acción a la salida%%00010out_action = action;%%00010out_valor_1 = numColumnasPrimeraTabla;%%00010out_vector_salida = nombresColumnas;%%00010out_clave_primaria = primeraVariable;%%00010out_resto_variables = restoVariables;%%00010"/>
        <config key="jarFiles">
            <entry key="array-size" type="xint" value="0"/>
        </config>
        <config key="outCols">
            <entry key="array-size" type="xint" value="6"/>
            <config key="0">
                <entry key="Name" type="xstring" value="action"/>
                <entry key="JavaName" type="xstring" value="out_action"/>
                <entry key="JavaType" type="xstring" value="java.lang.String"/>
                <config key="Type">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="ConverterFactory" type="xstring" value="org.knime.core.data.def.StringCell$StringCellFactory.createCell(class java.lang.String)"/>
                <entry key="replaceExisting" type="xboolean" value="false"/>
            </config>
            <config key="1">
                <entry key="Name" type="xstring" value="valor_1"/>
                <entry key="JavaName" type="xstring" value="out_valor_1"/>
                <entry key="JavaType" type="xstring" value="java.lang.Integer"/>
                <config key="Type">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.IntCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="ConverterFactory" type="xstring" value="org.knime.core.data.def.IntCell$IntCellFactory.create(class java.lang.Integer)"/>
                <entry key="replaceExisting" type="xboolean" value="false"/>
            </config>
            <config key="2">
                <entry key="Name" type="xstring" value="valor_2"/>
                <entry key="JavaName" type="xstring" value="out_valor_2"/>
                <entry key="JavaType" type="xstring" value="java.lang.String"/>
                <config key="Type">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="ConverterFactory" type="xstring" value="org.knime.core.data.def.StringCell$StringCellFactory.createCell(class java.lang.String)"/>
                <entry key="replaceExisting" type="xboolean" value="false"/>
            </config>
            <config key="3">
                <entry key="Name" type="xstring" value="vector_salida"/>
                <entry key="JavaName" type="xstring" value="out_vector_salida"/>
                <entry key="JavaType" type="xstring" value="[Ljava.lang.String;"/>
                <config key="Type">
                    <config key="collection_element_type">
                        <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    </config>
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.collection.ListCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="ConverterFactory" type="xstring" value="org.knime.core.data.convert.datacell.ArrayToCollectionConverterFactory(org.knime.core.data.def.StringCell$StringCellFactory.createCell(class java.lang.String))"/>
                <entry key="replaceExisting" type="xboolean" value="false"/>
            </config>
            <config key="4">
                <entry key="Name" type="xstring" value="clave_primaria"/>
                <entry key="JavaName" type="xstring" value="out_clave_primaria"/>
                <entry key="JavaType" type="xstring" value="java.lang.String"/>
                <config key="Type">
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="ConverterFactory" type="xstring" value="org.knime.core.data.def.StringCell$StringCellFactory.createCell(class java.lang.String)"/>
                <entry key="replaceExisting" type="xboolean" value="false"/>
            </config>
            <config key="5">
                <entry key="Name" type="xstring" value="resto_variables"/>
                <entry key="JavaName" type="xstring" value="out_resto_variables"/>
                <entry key="JavaType" type="xstring" value="[Ljava.lang.String;"/>
                <config key="Type">
                    <config key="collection_element_type">
                        <entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
                    </config>
                    <entry key="cell_class" type="xstring" value="org.knime.core.data.collection.ListCell"/>
                    <entry key="is_null" type="xboolean" value="false"/>
                </config>
                <entry key="ConverterFactory" type="xstring" value="org.knime.core.data.convert.datacell.ArrayToCollectionConverterFactory(org.knime.core.data.def.StringCell$StringCellFactory.createCell(class java.lang.String))"/>
                <entry key="replaceExisting" type="xboolean" value="false"/>
            </config>
        </config>
        <config key="outVars">
            <entry key="array-size" type="xint" value="0"/>
        </config>
        <config key="inCols">
            <entry key="array-size" type="xint" value="0"/>
        </config>
        <config key="inVars">
            <entry key="array-size" type="xint" value="0"/>
        </config>
        <entry key="version" type="xstring" value="version 1.x"/>
        <entry key="templateUUID" type="xstring" isnull="true" value=""/>
        <entry key="runOnExecute" type="xboolean" value="false"/>
        <config key="bundles">
            <entry key="array-size" type="xint" value="0"/>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="Logica que determina la etiquetacion %%00010correcta para cada tupla que nos llega"/>
        <entry key="contentType" type="xstring" value="text/plain"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="0"/>
        <entry key="y-coordinate" type="xint" value="0"/>
        <entry key="width" type="xint" value="0"/>
        <entry key="height" type="xint" value="0"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="0"/>
        <entry key="defFontSize" type="xint" value="-1"/>
        <entry key="annotation-version" type="xint" value="20230412"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="EXECUTED"/>
    <entry key="factory" type="xstring" value="org.knime.base.node.jsnippet.JavaSnippetNodeFactory"/>
    <entry key="node-name" type="xstring" value="Java Snippet"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Java Snippet Nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.jsnippets"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="5.3.0.v202406141017"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Javasnippet"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.javasnippet.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="5.3.0.v202406141017"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="Java Snippet"/>
    <entry key="hasContent" type="xboolean" value="true"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
            <entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            <entry key="port_object_summary" type="xstring" value="Rows: 1602, Cols: 31"/>
            <entry key="port_dir_location" type="xstring" value="port_1"/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
